%clearing workspac
%---------------------------------------------------------------
Original_factory_image = rgb2gray(imread('factory.jpg'));
scaled_factory_Image = im2double(Original_factory_image);%reading image
[m,n] = size(scaled_factory_Image);
%-----------------------------------------------------------------------------
figure;
subplot(4,4,1)
imshow(scaled_factory_Image,[])
title("Initial image")
subplot(4,4,2)
imshow(20*log(1+abs(fftshift(fft2(scaled_factory_Image)))),[])
title("Initial image fourier transform centered")
Fourier_Image = fftshift(fft2(scaled_factory_Image));
%Plotting impulse response of degradation system
sigma = 2;
h = fspecial("gaussian",[m,n],sigma);
subplot(4,4,3)
plot(h(m/2,:))
title("Impulse response line horizontal at the center")
subplot(4,4,4)
plot(h(:,n/2))
title("Impulse response line vertical at the center")
subplot(4,4,5)
imshow(log(1+h),[])
title("Impulse response as an image")
subplot(4,4,6)
imshow(20*log(1+abs(fftshift(fft2(h)))),[])
title("Gaussian fourier transform centered")
H = fftshift(fft2(h));

%Linear degradation of initial image in the frequency domain
filtered_image_space = imfilter(scaled_factory_Image,h,"same","conv");
Filtered_Image_Fourier = fftshift(fft2(filtered_image_space));
%Filtered_Image_Fourier = Fourier_Image.*H;
subplot(4,4,7)
imshow(20*log(1+abs(Filtered_Image_Fourier)),[])
title("Initial image FT degraded")
subplot(4,4,8)
Degraded_image = ifft2(fftshift(Filtered_Image_Fourier));
imshow(Degraded_image ,[])
title("Degraded Image")

%Adding nosise to degraded image of 10DB 
P_signal = sum(scaled_factory_Image(:).^2)/(m*n);
noise_var = P_signal/(10^(1));
Noisy_degraded_image = Degraded_image + sqrt(noise_var)*randn(m,n);
subplot(4,4,9)
imshow(Noisy_degraded_image ,[])
title("Degraded-Noisy Image") 

Noisy_degraded_image_FT = fftshift(fft2(Noisy_degraded_image));
subplot(4,4,10)
imshow(log(1+abs(Noisy_degraded_image_FT)) ,[])
title("Degraded-Noisy Image FT") 


%Wiener filtering 
P_G = (abs(Noisy_degraded_image_FT))/m*n;
P_F_with_knowledge = P_G - ones(m,n)*noise_var;
%Estimating Noise PSD
n_win =50;%Window of estimation in high frequencies where signal content can be considered negligible
Estimated_noise_var = mean2(P_G(m-n_win+1:m,n-n_win+1:n));
P_F_without_knowledge = P_G - ones(m,n)*Estimated_noise_var;
%Constructing wiener filters
Wiener1 = P_F_with_knowledge ./(P_F_with_knowledge + ones(m,n)*noise_var);
Wiener2 = P_F_with_knowledge ./(P_F_with_knowledge + ones(m,n)*Estimated_noise_var);
%Denoising with above filters
Denoised_I_wiener_1 = Noisy_degraded_image_FT.*Wiener1;
Denoised_I_wiener_2 = Noisy_degraded_image_FT.*Wiener2;
%Plotting Results
Degraded_image_inversed_1 = (ifft2(fftshift(Denoised_I_wiener_1)));
subplot(4,4,11)
imshow(Degraded_image_inversed_1 ,[])
title("Degraded Image after wnr with knowledge")
Degraded_image_inversed_2 = (ifft2(fftshift(Denoised_I_wiener_2)));
subplot(4,4,12)
imshow(Degraded_image_inversed_2 ,[])
title("Degraded Image after wnr without knowledge")

FT_noise = Noisy_degraded_image_FT - Filtered_Image_Fourier;
subplot(4,4,13)
imshow(log(1+(abs(FT_noise))) ,[])
title("FT of Noise image")
%Just estimation of noise variance in a flat area of the noisy image
temp = Noisy_degraded_image(370:380,600:610);
VAR_SPACE = var(temp(:));
%----------------------------------------------------------------------------


%inverse flitering on wiener filtering denoising one and 2 for final
%results of 1st method
%generating inverse filter
th = 0.001;
Temp_H = H;
Temp_H(abs(H)<th)=th;
h_inv_freq = 1./Temp_H;
inverse_filtered_image_1 =  Denoised_I_wiener_1.*h_inv_freq;
inverse_filtered_image_2 = Denoised_I_wiener_2.*h_inv_freq;

%Plotting Results
Degraded_image_inversed_1 = (ifft2(fftshift(inverse_filtered_image_1)));
subplot(4,4,11)
imshow(Degraded_image_inversed_1 ,[])
title("Degraded Image after wnr with knowledge")
Degraded_image_inversed_2 = (ifft2(fftshift(inverse_filtered_image_2)));
subplot(4,4,12)
imshow(Degraded_image_inversed_2 ,[])
title("Degraded Image after wnr without knowledge")

%=------------------------------------------------------
print(gcf, '-dpng', 'images_5/erwtima5_1_Initial.png');
